// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: lock.sql

package ent

import (
	"context"
	"time"
)

const createTableLocks = `-- name: CreateTableLocks :exec
CREATE TABLE IF NOT EXISTS aurora_schema_locks (
    -- primary key column
    id TEXT PRIMARY KEY,
    -- execution timestamp column
    created_at TIMESTAMP WITH TIME ZONE NOT NULL
)
`

// Creates a table named 'aurora_schema_locks' with the following columns:
func (q *Queries) CreateTableLocks(ctx context.Context) error {
	_, err := q.db.Exec(ctx, createTableLocks)
	return err
}

const deleteLock = `-- name: DeleteLock :one
DELETE FROM aurora_schema_locks
WHERE id = $1
RETURNING id, created_at
`

type DeleteLockParams struct {
	ID string `db:"id" json:"id"`
}

// Deletes a row from the table 'aurora_schema_locks' with option ':one'
func (q *Queries) DeleteLock(ctx context.Context, arg *DeleteLockParams) (*Lock, error) {
	row := q.db.QueryRow(ctx, deleteLock, arg.ID)
	var i Lock
	err := row.Scan(&i.ID, &i.CreatedAt)
	return &i, err
}

const execDeleteLock = `-- name: ExecDeleteLock :exec
DELETE FROM aurora_schema_locks
WHERE id = $1
`

type ExecDeleteLockParams struct {
	ID string `db:"id" json:"id"`
}

// Deletes a row from the table 'aurora_schema_locks' with option ':exec'
func (q *Queries) ExecDeleteLock(ctx context.Context, arg *ExecDeleteLockParams) error {
	_, err := q.db.Exec(ctx, execDeleteLock, arg.ID)
	return err
}

const execInsertLock = `-- name: ExecInsertLock :exec
INSERT INTO aurora_schema_locks (
    id,
    created_at
) VALUES (
    $1,
    $2
)
`

type ExecInsertLockParams struct {
	ID        string    `db:"id" json:"id"`
	CreatedAt time.Time `db:"created_at" json:"created_at"`
}

// Inserts a row into the table 'aurora_schema_locks' with option ':exec'
func (q *Queries) ExecInsertLock(ctx context.Context, arg *ExecInsertLockParams) error {
	_, err := q.db.Exec(ctx, execInsertLock, arg.ID, arg.CreatedAt)
	return err
}

const getLock = `-- name: GetLock :one
SELECT
    id,
    created_at
FROM
    aurora_schema_locks
WHERE
    id = $1
`

type GetLockParams struct {
	ID string `db:"id" json:"id"`
}

// Retrieves a row from the table 'aurora_schema_locks' with option ':one'
func (q *Queries) GetLock(ctx context.Context, arg *GetLockParams) (*Lock, error) {
	row := q.db.QueryRow(ctx, getLock, arg.ID)
	var i Lock
	err := row.Scan(&i.ID, &i.CreatedAt)
	return &i, err
}

const insertLock = `-- name: InsertLock :one
INSERT INTO aurora_schema_locks (
    id,
    created_at
) VALUES (
    $1,
    $2
)
RETURNING id, created_at
`

type InsertLockParams struct {
	ID        string    `db:"id" json:"id"`
	CreatedAt time.Time `db:"created_at" json:"created_at"`
}

// Inserts a row into the table 'aurora_schema_locks' with option ':one'
func (q *Queries) InsertLock(ctx context.Context, arg *InsertLockParams) (*Lock, error) {
	row := q.db.QueryRow(ctx, insertLock, arg.ID, arg.CreatedAt)
	var i Lock
	err := row.Scan(&i.ID, &i.CreatedAt)
	return &i, err
}
