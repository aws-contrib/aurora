// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: job.sql

package ent

import (
	"context"
)

const createSchemaSys = `-- name: CreateSchemaSys :exec
CREATE SCHEMA IF NOT EXISTS sys
`

// The schema 'sys' is created to hold system-related tables.
func (q *Queries) CreateSchemaSys(ctx context.Context) error {
	_, err := q.db.Exec(ctx, createSchemaSys)
	return err
}

const createTableJobs = `-- name: CreateTableJobs :exec
CREATE TABLE IF NOT EXISTS sys.jobs (
    -- primary key column
    job_id TEXT PRIMARY KEY,
    -- revision name
    status TEXT NOT NULL,
    -- total number of statements
    details TEXT NULL
)
`

// Creates a table named 'sys.jobs' with the following columns:
// The table 'sys.jobs' is created to track jobs in the system.
func (q *Queries) CreateTableJobs(ctx context.Context) error {
	_, err := q.db.Exec(ctx, createTableJobs)
	return err
}

const deleteJob = `-- name: DeleteJob :one
DELETE FROM sys.jobs
WHERE job_id = $1
RETURNING job_id, status, details
`

type DeleteJobParams struct {
	JobID string `db:"job_id" json:"job_id"`
}

// Deletes a row from the table 'sys.jobs' with option ':one'
func (q *Queries) DeleteJob(ctx context.Context, arg *DeleteJobParams) (*Job, error) {
	row := q.db.QueryRow(ctx, deleteJob, arg.JobID)
	var i Job
	err := row.Scan(&i.JobID, &i.Status, &i.Details)
	return &i, err
}

const execDeleteJob = `-- name: ExecDeleteJob :exec
DELETE FROM sys.jobs
WHERE job_id = $1
`

type ExecDeleteJobParams struct {
	JobID string `db:"job_id" json:"job_id"`
}

// Deletes a row from the table 'sys.jobs' with option ':exec'
func (q *Queries) ExecDeleteJob(ctx context.Context, arg *ExecDeleteJobParams) error {
	_, err := q.db.Exec(ctx, execDeleteJob, arg.JobID)
	return err
}

const execInsertJob = `-- name: ExecInsertJob :exec
INSERT INTO sys.jobs (
    job_id,
    status,
    details
) VALUES (
    $1,
    $2,
    $3
)
`

type ExecInsertJobParams struct {
	JobID   string  `db:"job_id" json:"job_id"`
	Status  string  `db:"status" json:"status"`
	Details *string `db:"details" json:"details"`
}

// Inserts a row into the table 'sys.jobs' with option ':exec'
func (q *Queries) ExecInsertJob(ctx context.Context, arg *ExecInsertJobParams) error {
	_, err := q.db.Exec(ctx, execInsertJob, arg.JobID, arg.Status, arg.Details)
	return err
}

const getJob = `-- name: GetJob :one
SELECT
    job_id,
    status,
    details
FROM
    sys.jobs
WHERE
    job_id = $1
`

type GetJobParams struct {
	JobID string `db:"job_id" json:"job_id"`
}

// Retrieves a row from the table 'sys.jobs' with option ':one'
func (q *Queries) GetJob(ctx context.Context, arg *GetJobParams) (*Job, error) {
	row := q.db.QueryRow(ctx, getJob, arg.JobID)
	var i Job
	err := row.Scan(&i.JobID, &i.Status, &i.Details)
	return &i, err
}

const insertJob = `-- name: InsertJob :one
INSERT INTO sys.jobs (
    job_id,
    status,
    details
) VALUES (
    $1,
    $2,
    $3
)
RETURNING job_id, status, details
`

type InsertJobParams struct {
	JobID   string  `db:"job_id" json:"job_id"`
	Status  string  `db:"status" json:"status"`
	Details *string `db:"details" json:"details"`
}

// Inserts a row into the table 'sys.jobs' with option ':one'
func (q *Queries) InsertJob(ctx context.Context, arg *InsertJobParams) (*Job, error) {
	row := q.db.QueryRow(ctx, insertJob, arg.JobID, arg.Status, arg.Details)
	var i Job
	err := row.Scan(&i.JobID, &i.Status, &i.Details)
	return &i, err
}
