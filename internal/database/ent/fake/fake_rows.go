// Code generated by counterfeiter. DO NOT EDIT.
package fake

import (
	"sync"

	pgx "github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgconn"
)

type FakeRows struct {
	CloseStub        func()
	closeMutex       sync.RWMutex
	closeArgsForCall []struct {
	}
	CommandTagStub        func() pgconn.CommandTag
	commandTagMutex       sync.RWMutex
	commandTagArgsForCall []struct {
	}
	commandTagReturns struct {
		result1 pgconn.CommandTag
	}
	commandTagReturnsOnCall map[int]struct {
		result1 pgconn.CommandTag
	}
	ConnStub        func() *pgx.Conn
	connMutex       sync.RWMutex
	connArgsForCall []struct {
	}
	connReturns struct {
		result1 *pgx.Conn
	}
	connReturnsOnCall map[int]struct {
		result1 *pgx.Conn
	}
	ErrStub        func() error
	errMutex       sync.RWMutex
	errArgsForCall []struct {
	}
	errReturns struct {
		result1 error
	}
	errReturnsOnCall map[int]struct {
		result1 error
	}
	FieldDescriptionsStub        func() []pgconn.FieldDescription
	fieldDescriptionsMutex       sync.RWMutex
	fieldDescriptionsArgsForCall []struct {
	}
	fieldDescriptionsReturns struct {
		result1 []pgconn.FieldDescription
	}
	fieldDescriptionsReturnsOnCall map[int]struct {
		result1 []pgconn.FieldDescription
	}
	NextStub        func() bool
	nextMutex       sync.RWMutex
	nextArgsForCall []struct {
	}
	nextReturns struct {
		result1 bool
	}
	nextReturnsOnCall map[int]struct {
		result1 bool
	}
	RawValuesStub        func() [][]byte
	rawValuesMutex       sync.RWMutex
	rawValuesArgsForCall []struct {
	}
	rawValuesReturns struct {
		result1 [][]byte
	}
	rawValuesReturnsOnCall map[int]struct {
		result1 [][]byte
	}
	ScanStub        func(...any) error
	scanMutex       sync.RWMutex
	scanArgsForCall []struct {
		arg1 []any
	}
	scanReturns struct {
		result1 error
	}
	scanReturnsOnCall map[int]struct {
		result1 error
	}
	ValuesStub        func() ([]any, error)
	valuesMutex       sync.RWMutex
	valuesArgsForCall []struct {
	}
	valuesReturns struct {
		result1 []any
		result2 error
	}
	valuesReturnsOnCall map[int]struct {
		result1 []any
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRows) Close() {
	fake.closeMutex.Lock()
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct {
	}{})
	stub := fake.CloseStub
	fake.recordInvocation("Close", []interface{}{})
	fake.closeMutex.Unlock()
	if stub != nil {
		fake.CloseStub()
	}
}

func (fake *FakeRows) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

func (fake *FakeRows) CloseCalls(stub func()) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = stub
}

func (fake *FakeRows) CommandTag() pgconn.CommandTag {
	fake.commandTagMutex.Lock()
	ret, specificReturn := fake.commandTagReturnsOnCall[len(fake.commandTagArgsForCall)]
	fake.commandTagArgsForCall = append(fake.commandTagArgsForCall, struct {
	}{})
	stub := fake.CommandTagStub
	fakeReturns := fake.commandTagReturns
	fake.recordInvocation("CommandTag", []interface{}{})
	fake.commandTagMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRows) CommandTagCallCount() int {
	fake.commandTagMutex.RLock()
	defer fake.commandTagMutex.RUnlock()
	return len(fake.commandTagArgsForCall)
}

func (fake *FakeRows) CommandTagCalls(stub func() pgconn.CommandTag) {
	fake.commandTagMutex.Lock()
	defer fake.commandTagMutex.Unlock()
	fake.CommandTagStub = stub
}

func (fake *FakeRows) CommandTagReturns(result1 pgconn.CommandTag) {
	fake.commandTagMutex.Lock()
	defer fake.commandTagMutex.Unlock()
	fake.CommandTagStub = nil
	fake.commandTagReturns = struct {
		result1 pgconn.CommandTag
	}{result1}
}

func (fake *FakeRows) CommandTagReturnsOnCall(i int, result1 pgconn.CommandTag) {
	fake.commandTagMutex.Lock()
	defer fake.commandTagMutex.Unlock()
	fake.CommandTagStub = nil
	if fake.commandTagReturnsOnCall == nil {
		fake.commandTagReturnsOnCall = make(map[int]struct {
			result1 pgconn.CommandTag
		})
	}
	fake.commandTagReturnsOnCall[i] = struct {
		result1 pgconn.CommandTag
	}{result1}
}

func (fake *FakeRows) Conn() *pgx.Conn {
	fake.connMutex.Lock()
	ret, specificReturn := fake.connReturnsOnCall[len(fake.connArgsForCall)]
	fake.connArgsForCall = append(fake.connArgsForCall, struct {
	}{})
	stub := fake.ConnStub
	fakeReturns := fake.connReturns
	fake.recordInvocation("Conn", []interface{}{})
	fake.connMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRows) ConnCallCount() int {
	fake.connMutex.RLock()
	defer fake.connMutex.RUnlock()
	return len(fake.connArgsForCall)
}

func (fake *FakeRows) ConnCalls(stub func() *pgx.Conn) {
	fake.connMutex.Lock()
	defer fake.connMutex.Unlock()
	fake.ConnStub = stub
}

func (fake *FakeRows) ConnReturns(result1 *pgx.Conn) {
	fake.connMutex.Lock()
	defer fake.connMutex.Unlock()
	fake.ConnStub = nil
	fake.connReturns = struct {
		result1 *pgx.Conn
	}{result1}
}

func (fake *FakeRows) ConnReturnsOnCall(i int, result1 *pgx.Conn) {
	fake.connMutex.Lock()
	defer fake.connMutex.Unlock()
	fake.ConnStub = nil
	if fake.connReturnsOnCall == nil {
		fake.connReturnsOnCall = make(map[int]struct {
			result1 *pgx.Conn
		})
	}
	fake.connReturnsOnCall[i] = struct {
		result1 *pgx.Conn
	}{result1}
}

func (fake *FakeRows) Err() error {
	fake.errMutex.Lock()
	ret, specificReturn := fake.errReturnsOnCall[len(fake.errArgsForCall)]
	fake.errArgsForCall = append(fake.errArgsForCall, struct {
	}{})
	stub := fake.ErrStub
	fakeReturns := fake.errReturns
	fake.recordInvocation("Err", []interface{}{})
	fake.errMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRows) ErrCallCount() int {
	fake.errMutex.RLock()
	defer fake.errMutex.RUnlock()
	return len(fake.errArgsForCall)
}

func (fake *FakeRows) ErrCalls(stub func() error) {
	fake.errMutex.Lock()
	defer fake.errMutex.Unlock()
	fake.ErrStub = stub
}

func (fake *FakeRows) ErrReturns(result1 error) {
	fake.errMutex.Lock()
	defer fake.errMutex.Unlock()
	fake.ErrStub = nil
	fake.errReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRows) ErrReturnsOnCall(i int, result1 error) {
	fake.errMutex.Lock()
	defer fake.errMutex.Unlock()
	fake.ErrStub = nil
	if fake.errReturnsOnCall == nil {
		fake.errReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.errReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRows) FieldDescriptions() []pgconn.FieldDescription {
	fake.fieldDescriptionsMutex.Lock()
	ret, specificReturn := fake.fieldDescriptionsReturnsOnCall[len(fake.fieldDescriptionsArgsForCall)]
	fake.fieldDescriptionsArgsForCall = append(fake.fieldDescriptionsArgsForCall, struct {
	}{})
	stub := fake.FieldDescriptionsStub
	fakeReturns := fake.fieldDescriptionsReturns
	fake.recordInvocation("FieldDescriptions", []interface{}{})
	fake.fieldDescriptionsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRows) FieldDescriptionsCallCount() int {
	fake.fieldDescriptionsMutex.RLock()
	defer fake.fieldDescriptionsMutex.RUnlock()
	return len(fake.fieldDescriptionsArgsForCall)
}

func (fake *FakeRows) FieldDescriptionsCalls(stub func() []pgconn.FieldDescription) {
	fake.fieldDescriptionsMutex.Lock()
	defer fake.fieldDescriptionsMutex.Unlock()
	fake.FieldDescriptionsStub = stub
}

func (fake *FakeRows) FieldDescriptionsReturns(result1 []pgconn.FieldDescription) {
	fake.fieldDescriptionsMutex.Lock()
	defer fake.fieldDescriptionsMutex.Unlock()
	fake.FieldDescriptionsStub = nil
	fake.fieldDescriptionsReturns = struct {
		result1 []pgconn.FieldDescription
	}{result1}
}

func (fake *FakeRows) FieldDescriptionsReturnsOnCall(i int, result1 []pgconn.FieldDescription) {
	fake.fieldDescriptionsMutex.Lock()
	defer fake.fieldDescriptionsMutex.Unlock()
	fake.FieldDescriptionsStub = nil
	if fake.fieldDescriptionsReturnsOnCall == nil {
		fake.fieldDescriptionsReturnsOnCall = make(map[int]struct {
			result1 []pgconn.FieldDescription
		})
	}
	fake.fieldDescriptionsReturnsOnCall[i] = struct {
		result1 []pgconn.FieldDescription
	}{result1}
}

func (fake *FakeRows) Next() bool {
	fake.nextMutex.Lock()
	ret, specificReturn := fake.nextReturnsOnCall[len(fake.nextArgsForCall)]
	fake.nextArgsForCall = append(fake.nextArgsForCall, struct {
	}{})
	stub := fake.NextStub
	fakeReturns := fake.nextReturns
	fake.recordInvocation("Next", []interface{}{})
	fake.nextMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRows) NextCallCount() int {
	fake.nextMutex.RLock()
	defer fake.nextMutex.RUnlock()
	return len(fake.nextArgsForCall)
}

func (fake *FakeRows) NextCalls(stub func() bool) {
	fake.nextMutex.Lock()
	defer fake.nextMutex.Unlock()
	fake.NextStub = stub
}

func (fake *FakeRows) NextReturns(result1 bool) {
	fake.nextMutex.Lock()
	defer fake.nextMutex.Unlock()
	fake.NextStub = nil
	fake.nextReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeRows) NextReturnsOnCall(i int, result1 bool) {
	fake.nextMutex.Lock()
	defer fake.nextMutex.Unlock()
	fake.NextStub = nil
	if fake.nextReturnsOnCall == nil {
		fake.nextReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.nextReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeRows) RawValues() [][]byte {
	fake.rawValuesMutex.Lock()
	ret, specificReturn := fake.rawValuesReturnsOnCall[len(fake.rawValuesArgsForCall)]
	fake.rawValuesArgsForCall = append(fake.rawValuesArgsForCall, struct {
	}{})
	stub := fake.RawValuesStub
	fakeReturns := fake.rawValuesReturns
	fake.recordInvocation("RawValues", []interface{}{})
	fake.rawValuesMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRows) RawValuesCallCount() int {
	fake.rawValuesMutex.RLock()
	defer fake.rawValuesMutex.RUnlock()
	return len(fake.rawValuesArgsForCall)
}

func (fake *FakeRows) RawValuesCalls(stub func() [][]byte) {
	fake.rawValuesMutex.Lock()
	defer fake.rawValuesMutex.Unlock()
	fake.RawValuesStub = stub
}

func (fake *FakeRows) RawValuesReturns(result1 [][]byte) {
	fake.rawValuesMutex.Lock()
	defer fake.rawValuesMutex.Unlock()
	fake.RawValuesStub = nil
	fake.rawValuesReturns = struct {
		result1 [][]byte
	}{result1}
}

func (fake *FakeRows) RawValuesReturnsOnCall(i int, result1 [][]byte) {
	fake.rawValuesMutex.Lock()
	defer fake.rawValuesMutex.Unlock()
	fake.RawValuesStub = nil
	if fake.rawValuesReturnsOnCall == nil {
		fake.rawValuesReturnsOnCall = make(map[int]struct {
			result1 [][]byte
		})
	}
	fake.rawValuesReturnsOnCall[i] = struct {
		result1 [][]byte
	}{result1}
}

func (fake *FakeRows) Scan(arg1 ...any) error {
	fake.scanMutex.Lock()
	ret, specificReturn := fake.scanReturnsOnCall[len(fake.scanArgsForCall)]
	fake.scanArgsForCall = append(fake.scanArgsForCall, struct {
		arg1 []any
	}{arg1})
	stub := fake.ScanStub
	fakeReturns := fake.scanReturns
	fake.recordInvocation("Scan", []interface{}{arg1})
	fake.scanMutex.Unlock()
	if stub != nil {
		return stub(arg1...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRows) ScanCallCount() int {
	fake.scanMutex.RLock()
	defer fake.scanMutex.RUnlock()
	return len(fake.scanArgsForCall)
}

func (fake *FakeRows) ScanCalls(stub func(...any) error) {
	fake.scanMutex.Lock()
	defer fake.scanMutex.Unlock()
	fake.ScanStub = stub
}

func (fake *FakeRows) ScanArgsForCall(i int) []any {
	fake.scanMutex.RLock()
	defer fake.scanMutex.RUnlock()
	argsForCall := fake.scanArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRows) ScanReturns(result1 error) {
	fake.scanMutex.Lock()
	defer fake.scanMutex.Unlock()
	fake.ScanStub = nil
	fake.scanReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRows) ScanReturnsOnCall(i int, result1 error) {
	fake.scanMutex.Lock()
	defer fake.scanMutex.Unlock()
	fake.ScanStub = nil
	if fake.scanReturnsOnCall == nil {
		fake.scanReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.scanReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRows) Values() ([]any, error) {
	fake.valuesMutex.Lock()
	ret, specificReturn := fake.valuesReturnsOnCall[len(fake.valuesArgsForCall)]
	fake.valuesArgsForCall = append(fake.valuesArgsForCall, struct {
	}{})
	stub := fake.ValuesStub
	fakeReturns := fake.valuesReturns
	fake.recordInvocation("Values", []interface{}{})
	fake.valuesMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRows) ValuesCallCount() int {
	fake.valuesMutex.RLock()
	defer fake.valuesMutex.RUnlock()
	return len(fake.valuesArgsForCall)
}

func (fake *FakeRows) ValuesCalls(stub func() ([]any, error)) {
	fake.valuesMutex.Lock()
	defer fake.valuesMutex.Unlock()
	fake.ValuesStub = stub
}

func (fake *FakeRows) ValuesReturns(result1 []any, result2 error) {
	fake.valuesMutex.Lock()
	defer fake.valuesMutex.Unlock()
	fake.ValuesStub = nil
	fake.valuesReturns = struct {
		result1 []any
		result2 error
	}{result1, result2}
}

func (fake *FakeRows) ValuesReturnsOnCall(i int, result1 []any, result2 error) {
	fake.valuesMutex.Lock()
	defer fake.valuesMutex.Unlock()
	fake.ValuesStub = nil
	if fake.valuesReturnsOnCall == nil {
		fake.valuesReturnsOnCall = make(map[int]struct {
			result1 []any
			result2 error
		})
	}
	fake.valuesReturnsOnCall[i] = struct {
		result1 []any
		result2 error
	}{result1, result2}
}

func (fake *FakeRows) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRows) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ pgx.Rows = new(FakeRows)
