// Code generated by github.com/jmattheis/goverter, DO NOT EDIT.
//go:build !goverter

package ent

type DeleteJobParamsConverterImpl struct{}

func (c *DeleteJobParamsConverterImpl) SetFromJob(target *DeleteJobParams, source *Job) {
	if source != nil {
		target.JobID = source.JobID
	}
}

type DeleteLockParamsConverterImpl struct{}

func (c *DeleteLockParamsConverterImpl) SetFromLock(target *DeleteLockParams, source *Lock) {
	if source != nil {
		target.ID = source.ID
	}
}

type DeleteRevisionParamsConverterImpl struct{}

func (c *DeleteRevisionParamsConverterImpl) SetFromRevision(target *DeleteRevisionParams, source *Revision) {
	if source != nil {
		target.ID = source.ID
	}
}

type ExecDeleteJobParamsConverterImpl struct{}

func (c *ExecDeleteJobParamsConverterImpl) SetFromJob(target *ExecDeleteJobParams, source *Job) {
	if source != nil {
		target.JobID = source.JobID
	}
}

type ExecDeleteLockParamsConverterImpl struct{}

func (c *ExecDeleteLockParamsConverterImpl) SetFromLock(target *ExecDeleteLockParams, source *Lock) {
	if source != nil {
		target.ID = source.ID
	}
}

type ExecDeleteRevisionParamsConverterImpl struct{}

func (c *ExecDeleteRevisionParamsConverterImpl) SetFromRevision(target *ExecDeleteRevisionParams, source *Revision) {
	if source != nil {
		target.ID = source.ID
	}
}

type ExecInsertJobParamsConverterImpl struct{}

func (c *ExecInsertJobParamsConverterImpl) SetFromJob(target *ExecInsertJobParams, source *Job) {
	if source != nil {
		target.JobID = source.JobID
		target.Status = source.Status
		target.Details = source.Details
	}
}

type ExecInsertLockParamsConverterImpl struct{}

func (c *ExecInsertLockParamsConverterImpl) SetFromLock(target *ExecInsertLockParams, source *Lock) {
	if source != nil {
		target.ID = source.ID
		target.CreatedAt = source.CreatedAt
	}
}

type ExecInsertRevisionParamsConverterImpl struct{}

func (c *ExecInsertRevisionParamsConverterImpl) SetFromRevision(target *ExecInsertRevisionParams, source *Revision) {
	if source != nil {
		target.ID = source.ID
		target.Description = source.Description
		target.Total = source.Total
		target.Count = source.Count
		target.Error = source.Error
		target.ErrorStmt = source.ErrorStmt
		target.ExecutedAt = source.ExecutedAt
		target.ExecutionTime = source.ExecutionTime
	}
}

type ExecUpdateRevisionParamsConverterImpl struct{}

func (c *ExecUpdateRevisionParamsConverterImpl) SetFromRevision(target *ExecUpdateRevisionParams, source *Revision) {
	if source != nil {
		target.Description = source.Description
		target.Total = source.Total
		target.Count = source.Count
		target.Error = source.Error
		target.ErrorStmt = source.ErrorStmt
		target.ExecutedAt = source.ExecutedAt
		target.ExecutionTime = source.ExecutionTime
		target.ID = source.ID
	}
}

type ExecUpsertRevisionParamsConverterImpl struct{}

func (c *ExecUpsertRevisionParamsConverterImpl) SetFromRevision(target *ExecUpsertRevisionParams, source *Revision) {
	if source != nil {
		target.ID = source.ID
		target.Description = source.Description
		target.Total = source.Total
		target.Count = source.Count
		target.Error = source.Error
		target.ErrorStmt = source.ErrorStmt
		target.ExecutedAt = source.ExecutedAt
		target.ExecutionTime = source.ExecutionTime
	}
}

type GetJobParamsConverterImpl struct{}

func (c *GetJobParamsConverterImpl) SetFromJob(target *GetJobParams, source *Job) {
	if source != nil {
		target.JobID = source.JobID
	}
}

type GetLockParamsConverterImpl struct{}

func (c *GetLockParamsConverterImpl) SetFromLock(target *GetLockParams, source *Lock) {
	if source != nil {
		target.ID = source.ID
	}
}

type GetRevisionParamsConverterImpl struct{}

func (c *GetRevisionParamsConverterImpl) SetFromRevision(target *GetRevisionParams, source *Revision) {
	if source != nil {
		target.ID = source.ID
	}
}

type InsertJobParamsConverterImpl struct{}

func (c *InsertJobParamsConverterImpl) SetFromJob(target *InsertJobParams, source *Job) {
	if source != nil {
		target.JobID = source.JobID
		target.Status = source.Status
		target.Details = source.Details
	}
}

type InsertLockParamsConverterImpl struct{}

func (c *InsertLockParamsConverterImpl) SetFromLock(target *InsertLockParams, source *Lock) {
	if source != nil {
		target.ID = source.ID
		target.CreatedAt = source.CreatedAt
	}
}

type InsertRevisionParamsConverterImpl struct{}

func (c *InsertRevisionParamsConverterImpl) SetFromRevision(target *InsertRevisionParams, source *Revision) {
	if source != nil {
		target.ID = source.ID
		target.Description = source.Description
		target.Total = source.Total
		target.Count = source.Count
		target.Error = source.Error
		target.ErrorStmt = source.ErrorStmt
		target.ExecutedAt = source.ExecutedAt
		target.ExecutionTime = source.ExecutionTime
	}
}

type UpdateRevisionParamsConverterImpl struct{}

func (c *UpdateRevisionParamsConverterImpl) SetFromRevision(target *UpdateRevisionParams, source *Revision) {
	if source != nil {
		target.Description = source.Description
		target.Total = source.Total
		target.Count = source.Count
		target.Error = source.Error
		target.ErrorStmt = source.ErrorStmt
		target.ExecutedAt = source.ExecutedAt
		target.ExecutionTime = source.ExecutionTime
		target.ID = source.ID
	}
}

type UpsertRevisionParamsConverterImpl struct{}

func (c *UpsertRevisionParamsConverterImpl) SetFromRevision(target *UpsertRevisionParams, source *Revision) {
	if source != nil {
		target.ID = source.ID
		target.Description = source.Description
		target.Total = source.Total
		target.Count = source.Count
		target.Error = source.Error
		target.ErrorStmt = source.ErrorStmt
		target.ExecutedAt = source.ExecutedAt
		target.ExecutionTime = source.ExecutionTime
	}
}
